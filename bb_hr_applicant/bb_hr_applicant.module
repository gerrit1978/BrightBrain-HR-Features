<?php
/**
 * @file
 * Code for the BB HR Applicant feature.
 */

include_once 'bb_hr_applicant.features.inc';

/**
 * Implements hook_theme
 */
function bb_hr_applicant_theme() {
  return array(
    // Register the template specific for the resume profile teaser.
    'profile2__cv__teaser' => array(
    'render element' => 'elements',
    'template' => 'profile--cv--teaser',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function bb_hr_applicant_menu() {
  $items['admin/config/bb-hr/cv'] = array(
    'title' => 'CV',
    'description' => 'Settings for the applicant CV feature.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bb_hr_applicant_cv_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Admin settings form.
 */
function bb_hr_applicant_cv_settings($form) {
  $field_info = field_info_fields();
  $options = array();
  foreach (field_info_instances('profile2', 'cv') as $key => $field) {
    if ($field_info[$key]['type'] == 'field_collection') {
      $options[$key] = check_plain($field['label']);
    }
  }

  $form['bb_hr_applicant_cv_private_fields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Private fields'),
    '#options' => $options,
    '#default_value' => bb_hr_applicant_cv_private_fields(),
    '#description' => t('Private fields of a resume stay invisible to recruiter user by default. Special modules, like the job application feature, may grant access to the private fields.'),
  );
  $form['bb_hr_applicant_cv_required_fields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Required fields'),
    '#options' => $options,
    '#default_value' => bb_hr_applicant_cv_required_fields(),
    '#description' => t('A list of fields the user has to fill out before the resume is marked as \'visible\'. Changing this setting does not update the state of exisiting resumes.'),
  );
  $form['array_filter'] = array(
    '#type' => 'value',
    '#value' => TRUE,
  );
  return system_settings_form($form);
}

/**
 * Returns a list of resume fields (usually field collections) that remain
 * invisible for normal recruiter users. In special cases (e.g. the recruiter
 * user received an application), modules may allow view access, using
 * hook_recruiter_resume_private_fields_view_access().
 *
 * Profile2's private field setting cannot be used for this purpose, as they
 * always return FALSE for private fields and other modules cannot alter it.
 *
 * By default, the personal info and the attachment field collections are
 * private. The information can be altered in the admin settings and is then
 * saved in the variable 'recruiter_resume_private_fields'.
 */
function bb_hr_applicant_cv_private_fields() {
  $defaults = array(
    'field_cv_attachments',
    'field_cv_personal_information',
  );
  return variable_get('bb_hr_applicant_cv_private_fields', $defaults);

}

/**
 * Returns a list of fields that are required for a resume to be marked as
 * completed. This list of fields is furthermore used in the Rules condition
 * 'recruiter_resume_complete'.
 *
 * The information can be altered in the admin settings and is then saved in the
 * variable 'recruiter_resume_required_fields'.
 */
function bb_hr_applicant_cv_required_fields() {
  $defaults = array(
    'field_cv_personal_information',
    'field_cv_job_preferences',
    'field_cv_education',
    'field_cv_work_experience',
  );
  return variable_get('bb_hr_applicant_cv_required_fields', $defaults);
}


/**
 * Helper function to determine whether the given resume has been completed,
 * based on the required fields.
 * Used in Rules condition 'recruiter_resume_complete'.
 *
 * @param $profile
 *   The resume.
 *
 * @return bool
 *   TRUE if completed.
 */
function bb_hr_applicant_cv_is_complete($profile) {


  if ($profile && isset($profile->type) && $profile->type == "cv") {
    $flag = TRUE;
    foreach (bb_hr_applicant_cv_required_fields() as $field) {
      if (!isset($profile->$field) || empty($profile->$field)) {
        $flag = FALSE;
      }
    }
  } else {
    $flag = FALSE;
  }
  
  return $flag;
}
